import os
import logging
import subprocess
import time
import telebot
import psutil
import pyautogui
import tempfile
import winreg
import ctypes
import zipfile
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from win10toast import ToastNotifier
import config

bot = telebot.TeleBot(config.TOKEN)
logger = telebot.logger
logger.setLevel(logging.INFO)
toaster = ToastNotifier()

user_state = {
    "process_page": 0,
    "selected_process": None,
    "waiting_for_path": None,
    "upload_path": None,
    "show_system_processes": False,
    "current_directory": os.path.expanduser("~"),
    "waiting_for_emulation_text": False,
    "waiting_for_process_kill": False,
    "process_list": [],
    "file_manager_page": 0
}


def log_command(command, output):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    with open("command_log.txt", "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] Command: {command}\n")
        f.write(f"Output: {output}\n\n")


def show_notification(command):
    toaster.show_toast("ControlPCbotV2", f"Executed command:\n{command}", duration=5, threaded=True)


def get_drives():
    drives = []
    for drive in psutil.disk_partitions():
        if 'cdrom' not in drive.opts:
            drives.append(drive.device)
    return drives


def create_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    autostart_status = "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫" if check_autostart() else "‚ùå –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫"
    buttons = [
        InlineKeyboardButton("üñ•Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="shutdown"),
        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", callback_data="reboot"),
        InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot"),
        InlineKeyboardButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", callback_data="file_manager"),
        InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="kill_menu"),
        InlineKeyboardButton("üîä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é", callback_data="volume_control"),
        InlineKeyboardButton("‚å®Ô∏è –≠–º—É–ª—è—Ü–∏—è –∫–ª–∞–≤–∏—à", callback_data="key_emulation"),
        InlineKeyboardButton("üñ± –≠–º—É–ª—è—Ü–∏—è –º—ã—à–∏", callback_data="mouse_emulation"),
        InlineKeyboardButton("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞", callback_data="lock_screen"),
        InlineKeyboardButton(autostart_status, callback_data="autostart")
    ]
    keyboard.add(*buttons)
    return keyboard


def create_file_manager_keyboard(current_path=None):
    keyboard = InlineKeyboardMarkup()

    if current_path is None:
        current_path = user_state["current_directory"]

    drives = get_drives()
    for drive in drives:
        keyboard.add(InlineKeyboardButton(f"üíæ –î–∏—Å–∫ {drive}", callback_data=f"folder_{drive}"))

    keyboard.add(InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å—é–¥–∞", callback_data="upload_here"))
    keyboard.add(InlineKeyboardButton("üì• –ò–∑–≤–ª–µ—á—å —Ñ–∞–π–ª", callback_data="get_file_here"))
    keyboard.add(InlineKeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="enter_path"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    return keyboard


def create_directory_keyboard(path):
    keyboard = InlineKeyboardMarkup()
    page = user_state["file_manager_page"]
    items_per_page = 30

    try:
        items = os.listdir(path)
        total_items = len(items)
        total_pages = (total_items + items_per_page - 1) // items_per_page

        start_index = page * items_per_page
        end_index = min((page + 1) * items_per_page, total_items)

        for i in range(start_index, end_index):
            item = items[i]
            full_path = os.path.join(path, item)
            if os.path.isdir(full_path):
                keyboard.add(InlineKeyboardButton(f"üìÅ {item}", callback_data=f"folder_{full_path}"))
            else:
                size = os.path.getsize(full_path) // 1024
                keyboard.add(InlineKeyboardButton(f"üìÑ {item} ({size} KB)", callback_data=f"file_{full_path}"))

        navigation_buttons = []
        if page > 0:
            navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="file_manager_prev"))
        if page < total_pages - 1:
            navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="file_manager_next"))

        if navigation_buttons:
            keyboard.row(*navigation_buttons)

        parent_dir = os.path.dirname(path)
        if parent_dir and os.path.exists(parent_dir) and parent_dir != path:
            keyboard.add(InlineKeyboardButton("‚¨ÜÔ∏è –í—ã—à–µ", callback_data=f"folder_{parent_dir}"))

        keyboard.add(InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å—é–¥–∞", callback_data="upload_here"))
        keyboard.add(InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É –∞—Ä—Ö–∏–≤–æ–º", callback_data="archive_folder"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    except Exception as e:
        keyboard.add(InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", callback_data="noop"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    return keyboard


def create_volume_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîá Mute", callback_data="volume_mute"))
    keyboard.add(InlineKeyboardButton("üîä Volume Up", callback_data="volume_up"))
    keyboard.add(InlineKeyboardButton("üîà Volume Down", callback_data="volume_down"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard


def create_key_emulation_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="emulate_text"))
    keyboard.add(InlineKeyboardButton("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏", callback_data="special_keys"))
    keyboard.add(InlineKeyboardButton("–°–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à", callback_data="key_combinations"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard


def create_special_keys_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    keys = [
        "Win", "Ctrl", "Alt", "Tab", "Enter", "Space",
        "Up", "Down", "Left", "Right", "Esc", "Delete"
    ]
    buttons = [InlineKeyboardButton(key, callback_data=f"key_{key}") for key in keys]
    keyboard.add(*buttons)
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="key_emulation"))
    return keyboard


def create_key_combinations_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    combinations = {
        "Win+L": "lock",
        "Alt+Tab": "alt_tab",
        "Ctrl+C": "ctrl_c",
        "Ctrl+V": "ctrl_v",
        "Ctrl+Z": "ctrl_z",
        "Ctrl+A": "ctrl_a",
        "Ctrl+S": "ctrl_s",
        "Win+E": "win_e",
        "Win+R": "win_r",
        "Win+D": "win_d",
        "Ctrl+Shift+Esc": "ctrl_shift_esc",
        "Alt+F4": "alt_f4"
    }
    buttons = []
    for name, data in combinations.items():
        buttons.append(InlineKeyboardButton(name, callback_data=f"comb_{data}"))
    keyboard.add(*buttons)
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="key_emulation"))
    return keyboard


def create_mouse_emulation_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)

    keyboard.add(
        InlineKeyboardButton(" ", callback_data="noop"),
        InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="mouse_up"),
        InlineKeyboardButton(" ", callback_data="noop")
    )

    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="mouse_left"),
        InlineKeyboardButton("üñ±", callback_data="noop"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data="mouse_right")
    )

    keyboard.add(
        InlineKeyboardButton(" ", callback_data="noop"),
        InlineKeyboardButton("‚¨áÔ∏è", callback_data="mouse_down"),
        InlineKeyboardButton(" ", callback_data="noop")
    )

    keyboard.add(
        InlineKeyboardButton("–õ–ö–ú", callback_data="mouse_left_click"),
        InlineKeyboardButton("–ü–ö–ú", callback_data="mouse_right_click"),
        InlineKeyboardButton("–°–ö–ú", callback_data="mouse_middle_click")
    )

    keyboard.add(
        InlineKeyboardButton("–°–∫—Ä–æ–ª–ª ‚ñ≤", callback_data="mouse_scroll_up"),
        InlineKeyboardButton("–°–∫—Ä–æ–ª–ª ‚ñº", callback_data="mouse_scroll_down")
    )

    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard


def create_process_list_message():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
        try:
            if not user_state["show_system_processes"] and proc.pid < 1000:
                continue
            processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    if not processes:
        return "‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", []

    processes.sort(key=lambda x: x.info['memory_info'].rss if x.info['memory_info'] else 0, reverse=True)

    result = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n\n"
    process_list = []

    for i, proc in enumerate(processes[:20], 1):
        try:
            memory_mb = proc.info['memory_info'].rss // 1024 // 1024 if proc.info['memory_info'] else 0
            result += f"{i}. {proc.info['name']} (PID: {proc.pid}) - {memory_mb} MB\n"
            process_list.append(proc.pid)
        except:
            continue

    result += f"\nüìä –í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(process_list)}"
    result += "\n\nüí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"

    return result, process_list


def create_zip_archive(folder_path, zip_path):
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, folder_path)
                zipf.write(file_path, arcname)


def enable_autostart():
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        bat_path = os.path.join(script_dir, "start.bat")

        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"

        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:
            winreg.SetValueEx(key, "ControlPCbotV2", 0, winreg.REG_SZ, f'"{bat_path}"')

        return True
    except Exception as e:
        return False


def disable_autostart():
    try:
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"

        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:
            winreg.DeleteValue(key, "ControlPCbotV2")

        return True
    except Exception as e:
        return False


def check_autostart():
    try:
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"

        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_READ) as key:
            try:
                winreg.QueryValueEx(key, "ControlPCbotV2")
                return True
            except FileNotFoundError:
                return False
    except:
        return False


def toggle_autostart():
    if check_autostart():
        return disable_autostart()
    else:
        return enable_autostart()


def check_system_uptime():
    uptime_seconds = time.time() - psutil.boot_time()
    return uptime_seconds < 300


def take_screenshot():
    try:
        screenshot = pyautogui.screenshot()
        temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
        screenshot.save(temp_file.name, 'PNG')
        return temp_file.name
    except Exception as e:
        return None


def list_directory(path):
    try:
        if not os.path.exists(path):
            return "‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        if not os.path.isdir(path):
            return "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π"
        result = "üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:\n\n"
        for item in os.listdir(path):
            full_path = os.path.join(path, item)
            if os.path.isdir(full_path):
                result += f"üìÅ {item}/\n"
            else:
                size = os.path.getsize(full_path)
                result += f"üìÑ {item} ({size // 1024} KB)\n"
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


@bot.message_handler(func=lambda message: message.chat.id != config.CHAT_ID)
def handle_unauthorized(message):
    bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@bot.message_handler(commands=['start', 'help', 'menu'])
def send_welcome(message):
    if message.chat.id != config.CHAT_ID:
        return

    if check_system_uptime():
        bot.send_message(message.chat.id, "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ")

    help_text = (
        "ü§ñ ControlPCbotV2 - –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/cmd [–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ CMD\n\n"
        "‚ö†Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–ê–≤—Ç–æ—Ä: https://github.com/MrachniyTipchek"
    )
    keyboard = create_main_menu()
    bot.send_message(message.chat.id, help_text, reply_markup=keyboard)


@bot.message_handler(commands=['control'])
def show_control_menu(message):
    if message.chat.id != config.CHAT_ID:
        return
    keyboard = create_main_menu()
    bot.send_message(message.chat.id, "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ControlPCbotV2:", reply_markup=keyboard)


@bot.message_handler(commands=['log'])
def send_log(message):
    if message.chat.id != config.CHAT_ID:
        return
    try:
        with open("command_log.txt", "rb") as f:
            bot.send_document(message.chat.id, f, caption="üìù –õ–æ–≥ –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['cmd'])
def handle_cmd_command(message):
    if message.chat.id != config.CHAT_ID:
        return
    command = message.text.replace('/cmd', '', 1).strip()
    if not command:
        bot.reply_to(message, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cmd [–∫–æ–º–∞–Ω–¥–∞]")
        return
    show_notification(f"CMD: {command}")
    try:
        result = subprocess.run(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=30,
            encoding='cp866',
            cwd=os.path.expanduser("~")
        )
        output = result.stdout or result.stderr or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        log_command(command, output)

        if len(output) > 4000:
            with open("output.txt", "w", encoding="utf-8") as f:
                f.write(output)
            with open("output.txt", "rb") as f:
                bot.send_document(message.chat.id, f)
            os.remove("output.txt")
        else:
            bot.reply_to(message, f"```\n{output}\n```", parse_mode="Markdown")
    except Exception as e:
        log_command(command, f"Error: {str(e)}")
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['cmdlist'])
def cmd_list(message):
    if message.chat.id != config.CHAT_ID:
        return

    cmd_help = (
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ CMD –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ `cd` - –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ `dir` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏\n"
        "‚Ä¢ `ipconfig` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ `ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞\n"
        "‚Ä¢ `shutdown /s /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ\n"
        "‚Ä¢ `shutdown /r /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n"
        "‚Ä¢ `tasklist` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "‚Ä¢ `taskkill /F /PID <pid>` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
        "‚Ä¢ `systeminfo` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "‚Ä¢ `curl` - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\n"
        "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmd [–∫–æ–º–∞–Ω–¥–∞]"
    )
    bot.send_message(message.chat.id, cmd_help, parse_mode="Markdown")


@bot.message_handler(commands=['autorun'])
def handle_autorun(message):
    if message.chat.id != config.CHAT_ID:
        return

    try:
        if toggle_autostart():
            status = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É" if check_autostart() else "—É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏"
            bot.reply_to(message, f"‚úÖ –ë–æ—Ç {status}")
            log_command("Autorun", f"Toggled, now: {status}")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π: {str(e)}")


@bot.message_handler(
    func=lambda message: user_state.get("waiting_for_emulation_text") and message.chat.id == config.CHAT_ID)
def handle_emulation_text(message):
    user_state["waiting_for_emulation_text"] = False
    text = message.text
    try:
        pyautogui.write(text)
        bot.reply_to(message, f"‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω: '{text}'")
        log_command("Text Emulation", f"Text: {text}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

    keyboard = create_main_menu()
    bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@bot.message_handler(
    func=lambda message: user_state.get("waiting_for_process_kill") and message.chat.id == config.CHAT_ID)
def handle_process_kill_input(message):
    user_state["waiting_for_process_kill"] = False
    process_number = message.text.strip()

    try:
        index = int(process_number) - 1
        if 0 <= index < len(user_state["process_list"]):
            pid = user_state["process_list"][index]
            try:
                process = psutil.Process(pid)
                process_name = process.name()
                process.terminate()
                bot.reply_to(message, f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_name} (PID: {pid}) –∑–∞–≤–µ—Ä—à–µ–Ω")
                log_command("Kill Process", f"Terminated {process_name} (PID: {pid})")
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞")
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    keyboard = create_main_menu()
    bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.message.chat.id != config.CHAT_ID)
def handle_unauthorized_callback(call):
    bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@bot.callback_query_handler(func=lambda call: call.message.chat.id == config.CHAT_ID)
def handle_control_buttons(call):
    try:
        bot.answer_callback_query(call.id)
    except:
        pass

    action = call.data

    if action == "main_menu":
        keyboard = create_main_menu()
        try:
            bot.edit_message_text("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ControlPCbotV2:", call.message.chat.id,
                                  call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "autostart":
        try:
            if toggle_autostart():
                status = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É" if check_autostart() else "—É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏"
                bot.answer_callback_query(call.id, f"‚úÖ –ë–æ—Ç {status}")
                log_command("Autorun", f"Toggled, now: {status}")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π")

            keyboard = create_main_menu()
            bot.edit_message_text("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ControlPCbotV2:", call.message.chat.id,
                                  call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "shutdown":
        try:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="shutdown_confirm"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="shutdown_cancel")
            )
            bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?", call.message.chat.id,
                                  call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "shutdown_confirm":
        try:
            bot.edit_message_text("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!", call.message.chat.id,
                                  call.message.message_id)
            log_command("System Shutdown", "Initiated by bot")
            os.system("shutdown /s /t 60")
        except:
            pass

    elif action == "shutdown_cancel":
        keyboard = create_main_menu()
        try:
            bot.edit_message_text("‚ùå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", call.message.chat.id,
                                  call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "reboot":
        try:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reboot_confirm"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="reboot_cancel")
            )
            bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?", call.message.chat.id,
                                  call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "reboot_confirm":
        try:
            bot.edit_message_text("‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É!", call.message.chat.id,
                                  call.message.message_id)
            log_command("System Reboot", "Initiated by bot")
            os.system("shutdown /r /t 60")
        except:
            pass

    elif action == "reboot_cancel":
        keyboard = create_main_menu()
        try:
            bot.edit_message_text("‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", call.message.chat.id,
                                  call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "screenshot":
        try:
            screenshot_path = take_screenshot()
            if screenshot_path:
                with open(screenshot_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id, photo, caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                os.unlink(screenshot_path)
                log_command("Screenshot", "Taken")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "file_manager":
        user_state["file_manager_page"] = 0
        try:
            bot.edit_message_text("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:", call.message.chat.id,
                                  call.message.message_id, reply_markup=create_file_manager_keyboard())
        except:
            pass

    elif action.startswith("folder_"):
        path = action[7:]
        try:
            if not os.path.exists(path):
                bot.answer_callback_query(call.id, "‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            if not os.path.isdir(path):
                bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –ø–∞–ø–∫–∞")
                return

            user_state["current_directory"] = path
            user_state["file_manager_page"] = 0

            try:
                items = os.listdir(path)
                content = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {path}\n\n–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}"
                bot.edit_message_text(content, call.message.chat.id,
                                      call.message.message_id, reply_markup=create_directory_keyboard(path))
            except PermissionError:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")

    elif action.startswith("file_"):
        file_path = action[5:]
        try:
            if os.path.exists(file_path):
                with open(file_path, 'rb') as f:
                    bot.send_document(call.message.chat.id, f, caption=f"üìÑ {os.path.basename(file_path)}")
            else:
                bot.answer_callback_query(call.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    elif action == "upload_here":
        current_dir = user_state["current_directory"]
        try:
            bot.edit_message_text(f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–ø–∫—É:\n{current_dir}", call.message.chat.id,
                                  call.message.message_id)
            user_state["waiting_for_path"] = "upload_file"
            user_state["upload_path"] = current_dir
        except:
            pass

    elif action == "archive_folder":
        current_dir = user_state["current_directory"]
        try:
            temp_zip = tempfile.NamedTemporaryFile(delete=False, suffix='.zip')
            temp_zip.close()
            create_zip_archive(current_dir, temp_zip.name)
            with open(temp_zip.name, 'rb') as zip_file:
                bot.send_document(call.message.chat.id, zip_file,
                                  caption=f"üì¶ –ê—Ä—Ö–∏–≤ –ø–∞–ø–∫–∏: {os.path.basename(current_dir)}")
            os.unlink(temp_zip.name)
            log_command("Archive Folder", f"Archived: {current_dir}")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {str(e)}")

    elif action == "get_file_here":
        current_dir = user_state["current_directory"]
        try:
            bot.edit_message_text(f"üì• –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏:\n{current_dir}", call.message.chat.id,
                                  call.message.message_id)
            user_state["waiting_for_path"] = "get_file"
        except:
            pass

    elif action == "enter_path":
        try:
            bot.edit_message_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ:", call.message.chat.id, call.message.message_id)
            user_state["waiting_for_path"] = "enter_folder"
        except:
            pass

    elif action == "file_manager_prev":
        if user_state["file_manager_page"] > 0:
            user_state["file_manager_page"] -= 1
        current_dir = user_state["current_directory"]
        try:
            items = os.listdir(current_dir)
            content = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {current_dir}\n\n–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}"
            bot.edit_message_text(content, call.message.chat.id,
                                  call.message.message_id, reply_markup=create_directory_keyboard(current_dir))
        except:
            pass

    elif action == "file_manager_next":
        user_state["file_manager_page"] += 1
        current_dir = user_state["current_directory"]
        try:
            items = os.listdir(current_dir)
            content = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {current_dir}\n\n–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}"
            bot.edit_message_text(content, call.message.chat.id,
                                  call.message.message_id, reply_markup=create_directory_keyboard(current_dir))
        except:
            pass

    elif action == "log":
        try:
            with open("command_log.txt", "rb") as f:
                bot.send_document(call.message.chat.id, f, caption="üìù –õ–æ–≥ –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "kill_menu":
        try:
            process_text, process_list = create_process_list_message()
            user_state["process_list"] = process_list
            user_state["waiting_for_process_kill"] = True

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="kill_menu"))
            system_text = "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ" if user_state["show_system_processes"] else "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ"
            keyboard.add(InlineKeyboardButton(f"{system_text} –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="toggle_system"))
            keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

            bot.edit_message_text(process_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "toggle_system":
        user_state["show_system_processes"] = not user_state["show_system_processes"]
        try:
            process_text, process_list = create_process_list_message()
            user_state["process_list"] = process_list

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="kill_menu"))
            system_text = "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ" if user_state["show_system_processes"] else "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ"
            keyboard.add(InlineKeyboardButton(f"{system_text} –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="toggle_system"))
            keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

            bot.edit_message_text(process_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
        except:
            pass

    elif action == "volume_control":
        try:
            bot.edit_message_text("üîä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id,
                                  call.message.message_id, reply_markup=create_volume_keyboard())
        except:
            pass

    elif action == "volume_mute":
        try:
            pyautogui.press('volumemute')
            bot.answer_callback_query(call.id, "üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
            log_command("Volume Control", "Mute")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "volume_up":
        try:
            pyautogui.press('volumeup')
            bot.answer_callback_query(call.id, "üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞")
            log_command("Volume Control", "Volume Up")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "volume_down":
        try:
            pyautogui.press('volumedown')
            bot.answer_callback_query(call.id, "üîà –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞")
            log_command("Volume Control", "Volume Down")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "key_emulation":
        try:
            bot.edit_message_text("‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–º—É–ª—è—Ü–∏–∏:", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_key_emulation_keyboard())
        except:
            pass

    elif action == "emulate_text":
        try:
            bot.edit_message_text("üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –≤–≤–æ–¥–∞:", call.message.chat.id, call.message.message_id)
            user_state["waiting_for_emulation_text"] = True
        except:
            pass

    elif action == "special_keys":
        try:
            bot.edit_message_text("‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏—à—É:", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_special_keys_keyboard())
        except:
            pass

    elif action == "key_combinations":
        try:
            bot.edit_message_text("‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à:", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_key_combinations_keyboard())
        except:
            pass

    elif action.startswith("key_"):
        key = action[4:]
        try:
            if key == 'Win':
                pyautogui.press('win')
            else:
                pyautogui.press(key.lower())
            bot.answer_callback_query(call.id, f"‚úÖ –ö–ª–∞–≤–∏—à–∞ {key} –Ω–∞–∂–∞—Ç–∞")
            log_command("Key Press", f"Key: {key}")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action.startswith("comb_"):
        comb = action[5:]
        try:
            if comb == "lock":
                ctypes.windll.user32.LockWorkStation()
                bot.answer_callback_query(call.id, "üîí –≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            elif comb == "alt_tab":
                pyautogui.hotkey('alt', 'tab')
                bot.answer_callback_query(call.id, "‚úÖ Alt+Tab –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "ctrl_c":
                pyautogui.hotkey('ctrl', 'c')
                bot.answer_callback_query(call.id, "‚úÖ Ctrl+C –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "ctrl_v":
                pyautogui.hotkey('ctrl', 'v')
                bot.answer_callback_query(call.id, "‚úÖ Ctrl+V –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "ctrl_z":
                pyautogui.hotkey('ctrl', 'z')
                bot.answer_callback_query(call.id, "‚úÖ Ctrl+Z –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "ctrl_a":
                pyautogui.hotkey('ctrl', 'a')
                bot.answer_callback_query(call.id, "‚úÖ Ctrl+A –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "ctrl_s":
                pyautogui.hotkey('ctrl', 's')
                bot.answer_callback_query(call.id, "‚úÖ Ctrl+S –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "win_e":
                pyautogui.hotkey('win', 'e')
                bot.answer_callback_query(call.id, "‚úÖ Win+E –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "win_r":
                pyautogui.hotkey('win', 'r')
                bot.answer_callback_query(call.id, "‚úÖ Win+R –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "win_d":
                pyautogui.hotkey('win', 'd')
                bot.answer_callback_query(call.id, "‚úÖ Win+D –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "ctrl_shift_esc":
                pyautogui.hotkey('ctrl', 'shift', 'esc')
                bot.answer_callback_query(call.id, "‚úÖ Ctrl+Shift+Esc –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif comb == "alt_f4":
                pyautogui.hotkey('alt', 'f4')
                bot.answer_callback_query(call.id, "‚úÖ Alt+F4 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            log_command("Key Combination", f"Combination: {comb}")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_emulation":
        try:
            bot.edit_message_text("üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=create_mouse_emulation_keyboard())
        except:
            pass

    elif action == "mouse_up":
        try:
            pyautogui.move(0, -50)
            bot.answer_callback_query(call.id, "‚úÖ –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–≤–µ—Ä—Ö")
            log_command("Mouse Control", "Move Up")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_down":
        try:
            pyautogui.move(0, 50)
            bot.answer_callback_query(call.id, "‚úÖ –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω–∏–∑")
            log_command("Mouse Control", "Move Down")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_left":
        try:
            pyautogui.move(-50, 0)
            bot.answer_callback_query(call.id, "‚úÖ –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–ª–µ–≤–æ")
            log_command("Mouse Control", "Move Left")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_right":
        try:
            pyautogui.move(50, 0)
            bot.answer_callback_query(call.id, "‚úÖ –ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–ø—Ä–∞–≤–æ")
            log_command("Mouse Control", "Move Right")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_left_click":
        try:
            pyautogui.click()
            bot.answer_callback_query(call.id, "‚úÖ –õ–ö–ú –Ω–∞–∂–∞—Ç–∞")
            log_command("Mouse Control", "Left Click")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_right_click":
        try:
            pyautogui.click(button='right')
            bot.answer_callback_query(call.id, "‚úÖ –ü–ö–ú –Ω–∞–∂–∞—Ç–∞")
            log_command("Mouse Control", "Right Click")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_middle_click":
        try:
            pyautogui.click(button='middle')
            bot.answer_callback_query(call.id, "‚úÖ –°–ö–ú –Ω–∞–∂–∞—Ç–∞")
            log_command("Mouse Control", "Middle Click")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_scroll_up":
        try:
            pyautogui.scroll(100)
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö")
            log_command("Mouse Control", "Scroll Up")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "mouse_scroll_down":
        try:
            pyautogui.scroll(-100)
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑")
            log_command("Mouse Control", "Scroll Down")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "lock_screen":
        try:
            ctypes.windll.user32.LockWorkStation()
            bot.send_message(call.message.chat.id, "üîí –≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            log_command("Lock Screen", "Screen locked")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    elif action == "cmdlist":
        cmd_help = (
            "üìã –û—Å–Ω–æ–≤–Ω—ã–µ CMD –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "‚Ä¢ `cd` - –°–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ `dir` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏\n"
            "‚Ä¢ `ipconfig` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ `ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞\n"
            "‚Ä¢ `shutdown /s /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ\n"
            "‚Ä¢ `shutdown /r /t 0` - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n"
            "‚Ä¢ `tasklist` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "‚Ä¢ `taskkill /F /PID <pid>` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n"
            "‚Ä¢ `systeminfo` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
            "‚Ä¢ `curl` - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\n"
            "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmd [–∫–æ–º–∞–Ω–¥–∞]"
        )
        bot.send_message(call.message.chat.id, cmd_help, parse_mode="Markdown")

    elif action == "noop":
        pass


@bot.message_handler(content_types=['document'],
                     func=lambda message: message.chat.id == config.CHAT_ID and user_state.get("upload_path"))
def handle_file_upload(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        upload_dir = user_state["upload_path"]
        filename = message.document.file_name
        file_path = os.path.join(upload_dir, filename)

        if not os.path.exists(upload_dir):
            os.makedirs(upload_dir)

        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.reply_to(message, f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—É—Ç–∏:\n{file_path}")
        log_command("File Upload", f"Uploaded to: {file_path}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        log_command("File Upload Error", str(e))
    finally:
        user_state["upload_path"] = None
        keyboard = create_main_menu()
        bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: user_state.get("waiting_for_path") and message.chat.id == config.CHAT_ID)
def handle_path_input(message):
    path = message.text.strip()
    action = user_state["waiting_for_path"]
    user_state["waiting_for_path"] = None

    if action == "get_file":
        try:
            if not os.path.exists(path):
                bot.reply_to(message, "‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            elif os.path.isdir(path):
                bot.reply_to(message, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º")
            else:
                with open(path, 'rb') as f:
                    bot.send_document(message.chat.id, f, caption=f"üìÑ {os.path.basename(path)}")
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            keyboard = create_main_menu()
            bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

    elif action == "enter_folder":
        if os.path.exists(path) and os.path.isdir(path):
            user_state["current_directory"] = path
            user_state["file_manager_page"] = 0
            try:
                items = os.listdir(path)
                content = f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {path}\n\n–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}"
                bot.reply_to(message, content, reply_markup=create_directory_keyboard(path))
            except PermissionError:
                bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
                keyboard = create_main_menu()
                bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                keyboard = create_main_menu()
                bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        else:
            bot.reply_to(message, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π")
            keyboard = create_main_menu()
            bot.send_message(message.chat.id, "üì± –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


if __name__ == "__main__":
    if not os.path.exists("command_log.txt"):
        open("command_log.txt", 'w').close()

    if check_system_uptime():
        try:
            bot.send_message(config.CHAT_ID,
                             "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω! ControlPCbotV2 –∞–∫—Ç–∏–≤–µ–Ω\n–ê–≤—Ç–æ—Ä: https://github.com/MrachniyTipchek")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

    print("=" * 50)
    print("ControlPCbotV2 - Windows Telegram Control Bot")
    print("=" * 50)
    print(f"–¢–æ–∫–µ–Ω: {config.TOKEN}")
    print(f"Chat ID: {config.CHAT_ID}")
    print("–ê–≤—Ç–æ—Ä: https://github.com/MrachniyTipchek")
    print("\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=30)
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {str(e)}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç")